@charset "UTF-8";

// Strips the unit from a number
@function strip-units($value) {
    @return $value / ($value * 0 + 1);
}

// Horizontally and vertically centers block element
@mixin center-abs {
    position: absolute;
    top: 50%;
    left: 50%;
    transition: translate(-50%, -50%);
}

// Retina image media query helper
@mixin image-2x($image, $width, $height) {
    @media (-webkit-min-device-pixel-ratio: 1.3), (min-resolution: 124dpi), (min-resolution: 1.3dppx) {
        /* on retina, use image that's scaled by 2 */
        background-image: url($image);
        background-size: $width $height;
    }
}

// Convert pixels to ems
@function em($pxval, $base: $em-base) {
    @if not unitless($pxval) {
        $pxval: strip-units($pxval);
    }

    @if not unitless($base) {
        $base: strip-units($base);
    }
    @return $pxval / $base * 1em;
}

// Convert pixels to rems
@function rem($pxval) {
    @if not unitless($pxval) {
        $pxval: strip-units($pxval);
    }
    $base: $em-base;

    @if not unitless($base) {
        $base: strip-units($base);
    }
    @return $pxval / $base * 1rem;
}

/// Background gradient helper
@mixin background-gradient($start-color, $end-color, $orientation) {
    background: $start-color;

    @if $orientation == "vertical" {
        background: -webkit-linear-gradient(top, $start-color, $end-color);
        background: linear-gradient(to bottom, $start-color, $end-color);
    }

    @else if $orientation == "horizontal" {
        background: -webkit-linear-gradient(left, $start-color, $end-color);
        background: linear-gradient(to right, $start-color, $end-color);
    }

    @else {
        background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);
        background: radial-gradient(ellipse at center, $start-color, $end-color);
    }
}
